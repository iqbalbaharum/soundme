/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface MyOpDef {
    array_length: (fdb: { alias: string; cid: string; data_key: string; public_key: string; }[], callParams: CallParams$$<'fdb'>) => number | Promise<number>;
}
export function registerMyOp(service: MyOpDef): void;
export function registerMyOp(serviceId: string, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, serviceId: string, service: MyOpDef): void;
       

export function registerMyOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "fdb" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "FdbDht",
                                "fields" : {
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface EventLogParamsMyOpDef {
    array_length: (results: { data: string; error_msg: string; event_name: string; params: { kind: string; name: string; value: string; }[]; success: boolean; }[], callParams: CallParams$$<'results'>) => number | Promise<number>;
}
export function registerEventLogParamsMyOp(service: EventLogParamsMyOpDef): void;
export function registerEventLogParamsMyOp(serviceId: string, service: EventLogParamsMyOpDef): void;
export function registerEventLogParamsMyOp(peer: FluencePeer, service: EventLogParamsMyOpDef): void;
export function registerEventLogParamsMyOp(peer: FluencePeer, serviceId: string, service: EventLogParamsMyOpDef): void;
       

export function registerEventLogParamsMyOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "EventLogParamResult",
                                "fields" : {
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "params" : {
                                        "tag" : "array",
                                        "type" : {
                                            "tag" : "struct",
                                            "name" : "DataLogParam",
                                            "fields" : {
                                                "kind" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "name" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "value" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                }
                                            }
                                        }
                                    },
                                    "event_name" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "error_msg" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface NumberOfBeatDef {
    array_length: (results: { alias: string; cid: string; data_key: string; public_key: string; }[], callParams: CallParams$$<'results'>) => number | Promise<number>;
}
export function registerNumberOfBeat(service: NumberOfBeatDef): void;
export function registerNumberOfBeat(serviceId: string, service: NumberOfBeatDef): void;
export function registerNumberOfBeat(peer: FluencePeer, service: NumberOfBeatDef): void;
export function registerNumberOfBeat(peer: FluencePeer, serviceId: string, service: NumberOfBeatDef): void;
       

export function registerNumberOfBeat(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "FdbDht",
                                "fields" : {
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface BeatsMyOpDef {
    array_length: (results: { cid: string; data_key: string; owner: string; token_id: number; }[], callParams: CallParams$$<'results'>) => number | Promise<number>;
}
export function registerBeatsMyOp(service: BeatsMyOpDef): void;
export function registerBeatsMyOp(serviceId: string, service: BeatsMyOpDef): void;
export function registerBeatsMyOp(peer: FluencePeer, service: BeatsMyOpDef): void;
export function registerBeatsMyOp(peer: FluencePeer, serviceId: string, service: BeatsMyOpDef): void;
       

export function registerBeatsMyOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Beat",
                                "fields" : {
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "owner" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    }
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function get_sheets(
    config?: {ttl?: number}
): Promise<{ cid: string; data_key: string; forked_beats: { cid: string; data_key: string; owner: string; token_id: number; }[]; owner: string; token_id: number; }[]>;

export function get_sheets(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<{ cid: string; data_key: string; forked_beats: { cid: string; data_key: string; owner: string; token_id: number; }[]; owner: string; token_id: number; }[]>;

export function get_sheets(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $sheets
                        (new $datas
                         (seq
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (ap "0xb6cf139cef7fa80097868d15e25a7cba51ec1c85e25f0aa709e5950f33321a2b" $array-inline)
                                  (canon -relay- $array-inline  #array-inline-0)
                                 )
                                )
                                (call -relay- ("676a3462-d46d-4ef6-8b9a-66873325ef1c" "eth_get_logs") ["https://goerli.infura.io/v3/106d9f764d6c4f248257a5a352e50a74" "https://ipfs.xfero.io/ipfs/QmW4ZnFYDsp3CWezBu3s7arhJmEhukrvF8J9X61VBHz7ez?filename=CollaBeatUtility2-abi.json" "0x0" "latest" "0xef7e2f7d3dedac01367652f661b468d3438c139b" #array-inline-0] results)
                               )
                               (call -relay- ("op" "array_length") [results] n)
                              )
                              (par
                               (fold results result-0
                                (par
                                 (seq
                                  (xor
                                   (mismatch result-0.$.data! ""
                                    (xor
                                     (seq
                                      (call -relay- ("e91cfe47-e87d-4fab-855d-e1e76a521fc9" "deserialize") [result-0.$.data!] fork_data)
                                      (xor
                                       (mismatch fork_data.$.cid! ""
                                        (xor
                                         (seq
                                          (call -relay- ("ipfs_dag" "get") [fork_data.$.cid! "/dns4/ipfs.xfero.io/tcp/5002" 0] content)
                                          (xor
                                           (match content.$.success! true
                                            (xor
                                             (xor
                                              (mismatch content.$.content! ""
                                               (xor
                                                (seq
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (call -relay- ("e91cfe47-e87d-4fab-855d-e1e76a521fc9" "get_forked_beats") [content.$.content!] beats)
                                                    (call -relay- ("op" "array_length") [beats] o)
                                                   )
                                                   (par
                                                    (fold beats beat-0
                                                     (par
                                                      (seq
                                                       (null)
                                                       (xor
                                                        (call -relay- ("f73671ed-e333-42d1-bd00-0da11bb89c30" "fork") [beat-0.$.data_key! fork_data.$.data_key! "" beat-0.$.owner!] result-1)
                                                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                                       )
                                                      )
                                                      (next beat-0)
                                                     )
                                                     (never)
                                                    )
                                                    (null)
                                                   )
                                                  )
                                                  (call -relay- ("json" "obj") ["cid" fork_data.$.cid! "data_key" fork_data.$.data_key! "forked_beats" beats "owner" fork_data.$.owner! "token_id" fork_data.$.token_id!] Sheet_obj)
                                                 )
                                                 (ap Sheet_obj $sheets)
                                                )
                                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                               )
                                              )
                                              (call -relay- ("op" "noop") [])
                                             )
                                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                            )
                                           )
                                           (call -relay- ("op" "noop") [])
                                          )
                                         )
                                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                        )
                                       )
                                       (call -relay- ("op" "noop") [])
                                      )
                                     )
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                                    )
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (ap result-0 $datas)
                                 )
                                 (next result-0)
                                )
                                (never)
                               )
                               (null)
                              )
                             )
                             (new $datas_test
                              (seq
                               (seq
                                (seq
                                 (call -relay- ("math" "add") [20 1] datas_incr)
                                 (fold $datas s
                                  (seq
                                   (seq
                                    (ap s $datas_test)
                                    (canon -relay- $datas_test  #datas_iter_canon)
                                   )
                                   (xor
                                    (match #datas_iter_canon.length datas_incr
                                     (null)
                                    )
                                    (next s)
                                   )
                                  )
                                  (never)
                                 )
                                )
                                (canon -relay- $datas_test  #datas_result_canon)
                               )
                               (ap #datas_result_canon datas_gate)
                              )
                             )
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                           )
                           (canon %init_peer_id% $sheets  #-sheets-fix-0)
                          )
                          (ap #-sheets-fix-0 -sheets-flat-0)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-sheets-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 8])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_sheets",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Sheet",
                        "fields" : {
                            "cid" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "token_id" : {
                                "tag" : "scalar",
                                "name" : "u64"
                            },
                            "owner" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "forked_beats" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "struct",
                                    "name" : "Beat",
                                    "fields" : {
                                        "cid" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "data_key" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "owner" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "token_id" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        }
                                    }
                                }
                            },
                            "data_key" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function beat_max_up(
    key: string,
    config?: {ttl?: number}
): Promise<{ alias: string; cid: string; data_key: string; public_key: string; }[]>;

export function beat_max_up(
    peer: FluencePeer,
    key: string,
    config?: {ttl?: number}
): Promise<{ alias: string; cid: string; data_key: string; public_key: string; }[]>;

export function beat_max_up(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "key") [] key)
                       )
                       (xor
                        (call -relay- ("f73671ed-e333-42d1-bd00-0da11bb89c30" "get_records_by_key") [key] dhts)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [dhts])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "beat_max_up",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbDht",
                        "fields" : {
                            "alias" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "cid" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "data_key" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "public_key" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function add_beat(
    key: string,
    public_key: string,
    content: string,
    signature: string,
    config?: {ttl?: number}
): Promise<void>;

export function add_beat(
    peer: FluencePeer,
    key: string,
    public_key: string,
    content: string,
    signature: string,
    config?: {ttl?: number}
): Promise<void>;

export function add_beat(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "key") [] key)
                          )
                          (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "content") [] content)
                        )
                        (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (seq
                        (seq
                         (seq
                          (seq
                           (call "12D3KooWHBG9oaVx4i3vi6c1rSBUm7MLBmyGmmbHoZ23pmjDCnvK" ("f73671ed-e333-42d1-bd00-0da11bb89c30" "get_latest_record_by_pk_and_key") [key public_key] dht)
                           (null)
                          )
                          (call "12D3KooWHBG9oaVx4i3vi6c1rSBUm7MLBmyGmmbHoZ23pmjDCnvK" ("block_formatter" "serialize") [dht.$.alias! content dht.$.cid!] formatted)
                         )
                         (call "12D3KooWHBG9oaVx4i3vi6c1rSBUm7MLBmyGmmbHoZ23pmjDCnvK" ("ipfs_dag" "put") [formatted "" 0] result)
                        )
                        (xor
                         (mismatch dht.$.cid! ""
                          (xor
                           (seq
                            (seq
                             (null)
                             (call "12D3KooWHBG9oaVx4i3vi6c1rSBUm7MLBmyGmmbHoZ23pmjDCnvK" ("f73671ed-e333-42d1-bd00-0da11bb89c30" "insert") [key dht.$.alias! result.$.cid! public_key signature content "secp256k1"])
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                          )
                         )
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call "12D3KooWHBG9oaVx4i3vi6c1rSBUm7MLBmyGmmbHoZ23pmjDCnvK" ("f73671ed-e333-42d1-bd00-0da11bb89c30" "insert") [key "" result.$.cid! public_key signature content "secp256k1"])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "add_beat",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "content" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Dht_forkResult = { err_msg: string; success: boolean; }
export function dht_fork(
    old_data_key: string,
    new_data_key: string,
    alias: string,
    public_key: string,
    config?: {ttl?: number}
): Promise<Dht_forkResult>;

export function dht_fork(
    peer: FluencePeer,
    old_data_key: string,
    new_data_key: string,
    alias: string,
    public_key: string,
    config?: {ttl?: number}
): Promise<Dht_forkResult>;

export function dht_fork(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "old_data_key") [] old_data_key)
                          )
                          (call %init_peer_id% ("getDataSrv" "new_data_key") [] new_data_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "alias") [] alias)
                        )
                        (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                       )
                       (xor
                        (call -relay- ("f73671ed-e333-42d1-bd00-0da11bb89c30" "fork") [old_data_key new_data_key alias public_key] result)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "dht_fork",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "old_data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "new_data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "alias" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function generate_block(
    key: string,
    public_key: string,
    dt: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_block(
    peer: FluencePeer,
    key: string,
    public_key: string,
    dt: string,
    config?: {ttl?: number}
): Promise<string>;

export function generate_block(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "key") [] key)
                         )
                         (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                        )
                        (call %init_peer_id% ("getDataSrv" "dt") [] dt)
                       )
                       (xor
                        (call -relay- ("block_formatter" "serialize") [public_key dt ""] serialize_dt)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [serialize_dt])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "generate_block",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "dt" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_metadata_uri(
    key: string,
    config?: {ttl?: number}
): Promise<string>;

export function get_metadata_uri(
    peer: FluencePeer,
    key: string,
    config?: {ttl?: number}
): Promise<string>;

export function get_metadata_uri(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "key") [] key)
                       )
                       (new $rss
                        (xor
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call -relay- ("f73671ed-e333-42d1-bd00-0da11bb89c30" "get_records_by_key") [key] get_records_by_key)
                              (call -relay- ("op" "array_length") [get_records_by_key] n)
                             )
                             (par
                              (fold get_records_by_key rst-0
                               (par
                                (new $sb
                                 (seq
                                  (seq
                                   (seq
                                    (call -relay- ("ipfs_dag" "get") [rst-0.$.cid! "" 0] get)
                                    (xor
                                     (mismatch rst-0.$.alias! ""
                                      (xor
                                       (seq
                                        (null)
                                        (call -relay- ("block_formatter" "serialize") [rst-0.$.alias! get.$.content! rst-0.$.cid!] $sb)
                                       )
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                      )
                                     )
                                     (seq
                                      (null)
                                      (call -relay- ("block_formatter" "serialize") [rst-0.$.public_key! get.$.content! rst-0.$.cid!] $sb)
                                     )
                                    )
                                   )
                                   (new $sb_test
                                    (seq
                                     (seq
                                      (seq
                                       (call -relay- ("math" "add") [0 1] sb_incr)
                                       (fold $sb s
                                        (seq
                                         (seq
                                          (ap s $sb_test)
                                          (canon -relay- $sb_test  #sb_iter_canon)
                                         )
                                         (xor
                                          (match #sb_iter_canon.length sb_incr
                                           (null)
                                          )
                                          (next s)
                                         )
                                        )
                                        (never)
                                       )
                                      )
                                      (canon -relay- $sb_test  #sb_result_canon)
                                     )
                                     (ap #sb_result_canon sb_gate)
                                    )
                                   )
                                  )
                                  (call -relay- ("block_formatter" "deserialize") [sb_gate.$.[0]!] $rss)
                                 )
                                )
                                (next rst-0)
                               )
                               (never)
                              )
                              (null)
                             )
                            )
                            (par
                             (seq
                              (seq
                               (call -relay- ("math" "sub") [n 1] sub)
                               (new $rss_test
                                (seq
                                 (seq
                                  (seq
                                   (call -relay- ("math" "add") [sub 1] rss_incr)
                                   (fold $rss s
                                    (seq
                                     (seq
                                      (ap s $rss_test)
                                      (canon -relay- $rss_test  #rss_iter_canon)
                                     )
                                     (xor
                                      (match #rss_iter_canon.length rss_incr
                                       (null)
                                      )
                                      (next s)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon -relay- $rss_test  #rss_result_canon)
                                 )
                                 (ap #rss_result_canon rss_gate)
                                )
                               )
                              )
                              (call -relay- ("math" "sub") [n 1] sub-0)
                             )
                             (call -relay- ("peer" "timeout") [9000 "timeout"])
                            )
                           )
                           (canon -relay- $rss  #rss_canon)
                          )
                          (call -relay- ("block_formatter" "format") ["" #rss_canon] format)
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [format])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata_uri",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
